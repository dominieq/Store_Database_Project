-- Generated by Oracle SQL Developer Data Modeler 18.3.0.268.1208
--   at:        2019-01-25 20:49:29 CET
--   site:      Oracle Database 12cR2
--   type:      Oracle Database 12cR2



CREATE TABLE dostawa (
    nrfaktury             INTEGER NOT NULL,
    datarozpoczêcia       DATE,
    datarealizacji        DATE,
    dostawca_iddostawcy   INTEGER NOT NULL
);

ALTER TABLE dostawa ADD CONSTRAINT dostawa_pk PRIMARY KEY ( nrfaktury );


CREATE TABLE Dostawa_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,NrFaktury INTEGER NOT NULL
 ,DataRozpoczêcia DATE
 ,DataRealizacji DATE
 ,Dostawca_IdDostawcy INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Dostawa_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Dostawa for each row 
 Declare 
  rec Dostawa_JN%ROWTYPE; 
  blank Dostawa_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.NrFaktury := :NEW.NrFaktury; 
      rec.DataRozpoczêcia := :NEW.DataRozpoczêcia; 
      rec.DataRealizacji := :NEW.DataRealizacji; 
      rec.Dostawca_IdDostawcy := :NEW.Dostawca_IdDostawcy; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.NrFaktury := :OLD.NrFaktury; 
      rec.DataRozpoczêcia := :OLD.DataRozpoczêcia; 
      rec.DataRealizacji := :OLD.DataRealizacji; 
      rec.Dostawca_IdDostawcy := :OLD.Dostawca_IdDostawcy; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Dostawa_JN VALUES rec; 
  END; 
  /CREATE TABLE dostawca (
    iddostawcy   INTEGER NOT NULL,
    nazwa        VARCHAR2(40 CHAR) NOT NULL,
    adres        VARCHAR2(100 CHAR) NOT NULL,
    telefon      VARCHAR2(15 CHAR) NOT NULL,
    mail         VARCHAR2(50 CHAR)
);

ALTER TABLE dostawca ADD CONSTRAINT dostawca_pk PRIMARY KEY ( iddostawcy );


CREATE TABLE Dostawca_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdDostawcy INTEGER NOT NULL
 ,Nazwa VARCHAR2 (40 CHAR) NOT NULL
 ,Adres VARCHAR2 (100 CHAR) NOT NULL
 ,Telefon VARCHAR2 (15 CHAR) NOT NULL
 ,Mail VARCHAR2 (50 CHAR)
 );

CREATE OR REPLACE TRIGGER Dostawca_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Dostawca for each row 
 Declare 
  rec Dostawca_JN%ROWTYPE; 
  blank Dostawca_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdDostawcy := :NEW.IdDostawcy; 
      rec.Nazwa := :NEW.Nazwa; 
      rec.Adres := :NEW.Adres; 
      rec.Telefon := :NEW.Telefon; 
      rec.Mail := :NEW.Mail; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdDostawcy := :OLD.IdDostawcy; 
      rec.Nazwa := :OLD.Nazwa; 
      rec.Adres := :OLD.Adres; 
      rec.Telefon := :OLD.Telefon; 
      rec.Mail := :OLD.Mail; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Dostawca_JN VALUES rec; 
  END; 
  /CREATE TABLE kategoria (
    idkategorii      INTEGER NOT NULL,
    nazwakategorii   VARCHAR2(40 CHAR) NOT NULL
);

ALTER TABLE kategoria ADD CONSTRAINT kategoria_pk PRIMARY KEY ( idkategorii );


CREATE TABLE Kategoria_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdKategorii INTEGER NOT NULL
 ,NazwaKategorii VARCHAR2 (40 CHAR) NOT NULL
 );

CREATE OR REPLACE TRIGGER Kategoria_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Kategoria for each row 
 Declare 
  rec Kategoria_JN%ROWTYPE; 
  blank Kategoria_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdKategorii := :NEW.IdKategorii; 
      rec.NazwaKategorii := :NEW.NazwaKategorii; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdKategorii := :OLD.IdKategorii; 
      rec.NazwaKategorii := :OLD.NazwaKategorii; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Kategoria_JN VALUES rec; 
  END; 
  /CREATE TABLE kurier (
    idkuriera   INTEGER NOT NULL,
    telefon     VARCHAR2(15 CHAR) NOT NULL
);

ALTER TABLE kurier ADD CONSTRAINT kurier_pk PRIMARY KEY ( idkuriera );


CREATE TABLE Kurier_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdKuriera INTEGER NOT NULL
 ,Telefon VARCHAR2 (15 CHAR) NOT NULL
 );

CREATE OR REPLACE TRIGGER Kurier_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Kurier for each row 
 Declare 
  rec Kurier_JN%ROWTYPE; 
  blank Kurier_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdKuriera := :NEW.IdKuriera; 
      rec.Telefon := :NEW.Telefon; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdKuriera := :OLD.IdKuriera; 
      rec.Telefon := :OLD.Telefon; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Kurier_JN VALUES rec; 
  END; 
  /CREATE TABLE magazyn (
    idmagazynu               INTEGER NOT NULL,
    adres                    VARCHAR2(100 CHAR) NOT NULL,
    pracownik_idpracownika   INTEGER NOT NULL
);

CREATE UNIQUE INDEX magazyn__idx ON
    magazyn (
        pracownik_idpracownika
    ASC );

ALTER TABLE magazyn ADD CONSTRAINT magazyn_pk PRIMARY KEY ( idmagazynu );


CREATE TABLE Magazyn_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdMagazynu INTEGER NOT NULL
 ,Adres VARCHAR2 (100 CHAR) NOT NULL
 ,Pracownik_IdPracownika INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Magazyn_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Magazyn for each row 
 Declare 
  rec Magazyn_JN%ROWTYPE; 
  blank Magazyn_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdMagazynu := :NEW.IdMagazynu; 
      rec.Adres := :NEW.Adres; 
      rec.Pracownik_IdPracownika := :NEW.Pracownik_IdPracownika; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdMagazynu := :OLD.IdMagazynu; 
      rec.Adres := :OLD.Adres; 
      rec.Pracownik_IdPracownika := :OLD.Pracownik_IdPracownika; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Magazyn_JN VALUES rec; 
  END; 
  /CREATE TABLE odbiorca (
    idodbiorcy   INTEGER NOT NULL,
    imiê         VARCHAR2(20 CHAR) NOT NULL,
    nazwisko     VARCHAR2(30 CHAR) NOT NULL,
    adres        VARCHAR2(100 CHAR) NOT NULL,
    telefon      VARCHAR2(15 CHAR) NOT NULL
);

ALTER TABLE odbiorca ADD CONSTRAINT odbiorca_pk PRIMARY KEY ( idodbiorcy );


CREATE TABLE Odbiorca_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdOdbiorcy INTEGER NOT NULL
 ,Imiê VARCHAR2 (20 CHAR) NOT NULL
 ,Nazwisko VARCHAR2 (30 CHAR) NOT NULL
 ,Adres VARCHAR2 (100 CHAR) NOT NULL
 ,Telefon VARCHAR2 (15 CHAR) NOT NULL
 );

CREATE OR REPLACE TRIGGER Odbiorca_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Odbiorca for each row 
 Declare 
  rec Odbiorca_JN%ROWTYPE; 
  blank Odbiorca_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdOdbiorcy := :NEW.IdOdbiorcy; 
      rec.Imiê := :NEW.Imiê; 
      rec.Nazwisko := :NEW.Nazwisko; 
      rec.Adres := :NEW.Adres; 
      rec.Telefon := :NEW.Telefon; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdOdbiorcy := :OLD.IdOdbiorcy; 
      rec.Imiê := :OLD.Imiê; 
      rec.Nazwisko := :OLD.Nazwisko; 
      rec.Adres := :OLD.Adres; 
      rec.Telefon := :OLD.Telefon; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Odbiorca_JN VALUES rec; 
  END; 
  /CREATE TABLE podpunkty_dostawy (
    dostawa_nrfaktury        INTEGER NOT NULL,
    sm_towar_idtowaru        INTEGER NOT NULL,
    smy_magazyn_idmagazynu   INTEGER NOT NULL,
    iloæ                    INTEGER NOT NULL
);

ALTER TABLE podpunkty_dostawy
    ADD CONSTRAINT relation_20_pk PRIMARY KEY ( dostawa_nrfaktury,
                                                sm_towar_idtowaru,
                                                smy_magazyn_idmagazynu );


CREATE TABLE Podpunkty_Dostawy_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Dostawa_NrFaktury INTEGER NOT NULL
 ,SM_Towar_IdTowaru INTEGER NOT NULL
 ,SMy_Magazyn_IdMagazynu INTEGER NOT NULL
 ,Iloæ INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Podpunkty_Dostawy_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Podpunkty_Dostawy for each row 
 Declare 
  rec Podpunkty_Dostawy_JN%ROWTYPE; 
  blank Podpunkty_Dostawy_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Dostawa_NrFaktury := :NEW.Dostawa_NrFaktury; 
      rec.SM_Towar_IdTowaru := :NEW.SM_Towar_IdTowaru; 
      rec.SMy_Magazyn_IdMagazynu := :NEW.SMy_Magazyn_IdMagazynu; 
      rec.Iloæ := :NEW.Iloæ; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Dostawa_NrFaktury := :OLD.Dostawa_NrFaktury; 
      rec.SM_Towar_IdTowaru := :OLD.SM_Towar_IdTowaru; 
      rec.SMy_Magazyn_IdMagazynu := :OLD.SMy_Magazyn_IdMagazynu; 
      rec.Iloæ := :OLD.Iloæ; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Podpunkty_Dostawy_JN VALUES rec; 
  END; 
  /CREATE TABLE podpunkty_zamówienia (
    z_nrzamówienia          INTEGER NOT NULL,
    sm_towar_idtowaru       INTEGER NOT NULL,
    sm_magazyn_idmagazynu   INTEGER NOT NULL,
    iloæ                   INTEGER NOT NULL
);

ALTER TABLE podpunkty_zamówienia
    ADD CONSTRAINT relation_21_pk PRIMARY KEY ( z_nrzamówienia,
                                                sm_towar_idtowaru,
                                                sm_magazyn_idmagazynu );


CREATE TABLE Podpunkty_zamówienia_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Z_NrZamówienia INTEGER NOT NULL
 ,SM_Towar_IdTowaru INTEGER NOT NULL
 ,SM_Magazyn_IdMagazynu INTEGER NOT NULL
 ,Iloæ INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Podpunkty_zamówienia_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Podpunkty_zamówienia for each row 
 Declare 
  rec Podpunkty_zamówienia_JN%ROWTYPE; 
  blank Podpunkty_zamówienia_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Z_NrZamówienia := :NEW.Z_NrZamówienia; 
      rec.SM_Towar_IdTowaru := :NEW.SM_Towar_IdTowaru; 
      rec.SM_Magazyn_IdMagazynu := :NEW.SM_Magazyn_IdMagazynu; 
      rec.Iloæ := :NEW.Iloæ; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Z_NrZamówienia := :OLD.Z_NrZamówienia; 
      rec.SM_Towar_IdTowaru := :OLD.SM_Towar_IdTowaru; 
      rec.SM_Magazyn_IdMagazynu := :OLD.SM_Magazyn_IdMagazynu; 
      rec.Iloæ := :OLD.Iloæ; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Podpunkty_zamówienia_JN VALUES rec; 
  END; 
  /CREATE TABLE pracownik (
    idpracownika   INTEGER NOT NULL,
    imiê           VARCHAR2(20 CHAR) NOT NULL,
    nazwisko       VARCHAR2(30 CHAR) NOT NULL,
    adres          VARCHAR2(100 CHAR) NOT NULL,
    telefon        VARCHAR2(15 CHAR),
    mail           VARCHAR2(50 CHAR),
    pesel          VARCHAR2(11 CHAR) NOT NULL
);

ALTER TABLE pracownik ADD CONSTRAINT pracownik_pk PRIMARY KEY ( idpracownika );


CREATE TABLE Pracownik_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdPracownika INTEGER NOT NULL
 ,Imiê VARCHAR2 (20 CHAR) NOT NULL
 ,Nazwisko VARCHAR2 (30 CHAR) NOT NULL
 ,Adres VARCHAR2 (100 CHAR) NOT NULL
 ,Telefon VARCHAR2 (15 CHAR)
 ,Mail VARCHAR2 (50 CHAR)
 ,PESEL VARCHAR2 (11 CHAR) NOT NULL
 );

CREATE OR REPLACE TRIGGER Pracownik_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Pracownik for each row 
 Declare 
  rec Pracownik_JN%ROWTYPE; 
  blank Pracownik_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdPracownika := :NEW.IdPracownika; 
      rec.Imiê := :NEW.Imiê; 
      rec.Nazwisko := :NEW.Nazwisko; 
      rec.Adres := :NEW.Adres; 
      rec.Telefon := :NEW.Telefon; 
      rec.Mail := :NEW.Mail; 
      rec.PESEL := :NEW.PESEL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdPracownika := :OLD.IdPracownika; 
      rec.Imiê := :OLD.Imiê; 
      rec.Nazwisko := :OLD.Nazwisko; 
      rec.Adres := :OLD.Adres; 
      rec.Telefon := :OLD.Telefon; 
      rec.Mail := :OLD.Mail; 
      rec.PESEL := :OLD.PESEL; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Pracownik_JN VALUES rec; 
  END; 
  /CREATE TABLE producent (
    idproducenta   INTEGER NOT NULL,
    nazwa          VARCHAR2(40 CHAR) NOT NULL,
    adres          VARCHAR2(100 CHAR),
    mail           VARCHAR2(50 CHAR),
    telefon        VARCHAR2(15),
    witryna        VARCHAR2(30)
);

ALTER TABLE producent ADD CONSTRAINT producent_pk PRIMARY KEY ( idproducenta );


CREATE TABLE Producent_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdProducenta INTEGER NOT NULL
 ,Nazwa VARCHAR2 (40 CHAR) NOT NULL
 ,Adres VARCHAR2 (100 CHAR)
 ,Mail VARCHAR2 (50 CHAR)
 ,Telefon VARCHAR2 (15)
 ,Witryna VARCHAR2 (30)
 );

CREATE OR REPLACE TRIGGER Producent_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Producent for each row 
 Declare 
  rec Producent_JN%ROWTYPE; 
  blank Producent_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdProducenta := :NEW.IdProducenta; 
      rec.Nazwa := :NEW.Nazwa; 
      rec.Adres := :NEW.Adres; 
      rec.Mail := :NEW.Mail; 
      rec.Telefon := :NEW.Telefon; 
      rec.Witryna := :NEW.Witryna; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdProducenta := :OLD.IdProducenta; 
      rec.Nazwa := :OLD.Nazwa; 
      rec.Adres := :OLD.Adres; 
      rec.Mail := :OLD.Mail; 
      rec.Telefon := :OLD.Telefon; 
      rec.Witryna := :OLD.Witryna; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Producent_JN VALUES rec; 
  END; 
  /CREATE TABLE stan_magazynowy (
    iloæ                INTEGER NOT NULL,
    towar_idtowaru       INTEGER NOT NULL,
    magazyn_idmagazynu   INTEGER NOT NULL
);

CREATE INDEX stan_magazynowy__idx ON
    stan_magazynowy (
        towar_idtowaru
    ASC,
        magazyn_idmagazynu
    ASC,
        iloæ
    ASC );

CREATE INDEX stan_magazynowy__idxv1 ON
    stan_magazynowy (
        magazyn_idmagazynu
    ASC,
        towar_idtowaru
    ASC,
        iloæ
    ASC );

ALTER TABLE stan_magazynowy ADD CONSTRAINT stan_magazynowy_pk PRIMARY KEY ( towar_idtowaru,
                                                                            magazyn_idmagazynu );


CREATE TABLE Stan_Magazynowy_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Iloæ INTEGER NOT NULL
 ,Towar_IdTowaru INTEGER NOT NULL
 ,Magazyn_IdMagazynu INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Stan_Magazynowy_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Stan_Magazynowy for each row 
 Declare 
  rec Stan_Magazynowy_JN%ROWTYPE; 
  blank Stan_Magazynowy_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Iloæ := :NEW.Iloæ; 
      rec.Towar_IdTowaru := :NEW.Towar_IdTowaru; 
      rec.Magazyn_IdMagazynu := :NEW.Magazyn_IdMagazynu; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Iloæ := :OLD.Iloæ; 
      rec.Towar_IdTowaru := :OLD.Towar_IdTowaru; 
      rec.Magazyn_IdMagazynu := :OLD.Magazyn_IdMagazynu; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Stan_Magazynowy_JN VALUES rec; 
  END; 
  /CREATE TABLE towar (
    idtowaru                 INTEGER NOT NULL,
    nazwa                    VARCHAR2(25 CHAR) NOT NULL,
    cenadetaliczna           NUMBER(12, 2),
    cenaproducenta           NUMBER(12, 2),
    producent_idproducenta   INTEGER NOT NULL,
    kategoria_idkategorii    INTEGER NOT NULL
);

CREATE INDEX towar__idx ON
    towar (
        nazwa
    ASC,
        idtowaru
    ASC );

ALTER TABLE towar ADD CONSTRAINT towar_pk PRIMARY KEY ( idtowaru );


CREATE TABLE Towar_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,IdTowaru INTEGER NOT NULL
 ,Nazwa VARCHAR2 (25 CHAR) NOT NULL
 ,CenaDetaliczna NUMBER (12,2)
 ,CenaProducenta NUMBER (12,2)
 ,Producent_IdProducenta INTEGER NOT NULL
 ,Kategoria_IdKategorii INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Towar_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Towar for each row 
 Declare 
  rec Towar_JN%ROWTYPE; 
  blank Towar_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.IdTowaru := :NEW.IdTowaru; 
      rec.Nazwa := :NEW.Nazwa; 
      rec.CenaDetaliczna := :NEW.CenaDetaliczna; 
      rec.CenaProducenta := :NEW.CenaProducenta; 
      rec.Producent_IdProducenta := :NEW.Producent_IdProducenta; 
      rec.Kategoria_IdKategorii := :NEW.Kategoria_IdKategorii; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.IdTowaru := :OLD.IdTowaru; 
      rec.Nazwa := :OLD.Nazwa; 
      rec.CenaDetaliczna := :OLD.CenaDetaliczna; 
      rec.CenaProducenta := :OLD.CenaProducenta; 
      rec.Producent_IdProducenta := :OLD.Producent_IdProducenta; 
      rec.Kategoria_IdKategorii := :OLD.Kategoria_IdKategorii; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Towar_JN VALUES rec; 
  END; 
  /CREATE TABLE zamówienie (
    nrzamówienia          INTEGER NOT NULL,
    datazamówienia        DATE NOT NULL,
    datarealizacji        DATE,
    kurier_idkuriera      INTEGER NOT NULL,
    odbiorca_idodbiorcy   INTEGER NOT NULL
);

CREATE INDEX zamówienie__idx ON
    zamówienie (
        odbiorca_idodbiorcy
    ASC,
        nrzamówienia
    ASC );

ALTER TABLE zamówienie ADD CONSTRAINT zamówienie_pk PRIMARY KEY ( nrzamówienia );


CREATE TABLE Zamówienie_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,NrZamówienia INTEGER NOT NULL
 ,DataZamówienia DATE NOT NULL
 ,DataRealizacji DATE
 ,Kurier_IdKuriera INTEGER NOT NULL
 ,Odbiorca_IdOdbiorcy INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Zamówienie_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Zamówienie for each row 
 Declare 
  rec Zamówienie_JN%ROWTYPE; 
  blank Zamówienie_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.NrZamówienia := :NEW.NrZamówienia; 
      rec.DataZamówienia := :NEW.DataZamówienia; 
      rec.DataRealizacji := :NEW.DataRealizacji; 
      rec.Kurier_IdKuriera := :NEW.Kurier_IdKuriera; 
      rec.Odbiorca_IdOdbiorcy := :NEW.Odbiorca_IdOdbiorcy; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.NrZamówienia := :OLD.NrZamówienia; 
      rec.DataZamówienia := :OLD.DataZamówienia; 
      rec.DataRealizacji := :OLD.DataRealizacji; 
      rec.Kurier_IdKuriera := :OLD.Kurier_IdKuriera; 
      rec.Odbiorca_IdOdbiorcy := :OLD.Odbiorca_IdOdbiorcy; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Zamówienie_JN VALUES rec; 
  END; 
  /ALTER TABLE dostawa
    ADD CONSTRAINT dostawa_dostawca_fk FOREIGN KEY ( dostawca_iddostawcy )
        REFERENCES dostawca ( iddostawcy );

ALTER TABLE magazyn
    ADD CONSTRAINT magazyn_pracownik_fk FOREIGN KEY ( pracownik_idpracownika )
        REFERENCES pracownik ( idpracownika );

ALTER TABLE podpunkty_dostawy
    ADD CONSTRAINT r_20_dostawa_fk FOREIGN KEY ( dostawa_nrfaktury )
        REFERENCES dostawa ( nrfaktury );

ALTER TABLE podpunkty_dostawy
    ADD CONSTRAINT r_20_stan_magazynowy_fk FOREIGN KEY ( sm_towar_idtowaru,
                                                         smy_magazyn_idmagazynu )
        REFERENCES stan_magazynowy ( towar_idtowaru,
                                     magazyn_idmagazynu );

ALTER TABLE podpunkty_zamówienia
    ADD CONSTRAINT r_21_stan_magazynowy_fk FOREIGN KEY ( sm_towar_idtowaru,
                                                         sm_magazyn_idmagazynu )
        REFERENCES stan_magazynowy ( towar_idtowaru,
                                     magazyn_idmagazynu );

ALTER TABLE podpunkty_zamówienia
    ADD CONSTRAINT r_21_zamówienie_fk FOREIGN KEY ( z_nrzamówienia )
        REFERENCES zamówienie ( nrzamówienia );

ALTER TABLE stan_magazynowy
    ADD CONSTRAINT sm_magazyn_fk FOREIGN KEY ( magazyn_idmagazynu )
        REFERENCES magazyn ( idmagazynu );

ALTER TABLE stan_magazynowy
    ADD CONSTRAINT sm_towar_fk FOREIGN KEY ( towar_idtowaru )
        REFERENCES towar ( idtowaru );

ALTER TABLE towar
    ADD CONSTRAINT towar_kategoria_fk FOREIGN KEY ( kategoria_idkategorii )
        REFERENCES kategoria ( idkategorii );

ALTER TABLE towar
    ADD CONSTRAINT towar_producent_fk FOREIGN KEY ( producent_idproducenta )
        REFERENCES producent ( idproducenta );

ALTER TABLE zamówienie
    ADD CONSTRAINT zamówienie_kurier_fk FOREIGN KEY ( kurier_idkuriera )
        REFERENCES kurier ( idkuriera );

ALTER TABLE zamówienie
    ADD CONSTRAINT zamówienie_odbiorca_fk FOREIGN KEY ( odbiorca_idodbiorcy )
        REFERENCES odbiorca ( idodbiorcy );

ALTER TABLE dostawa
    ADD CONSTRAINT dostawa_dostawca_fk FOREIGN KEY ( dostawca_iddostawcy )
        REFERENCES dostawca ( iddostawcy );

ALTER TABLE magazyn
    ADD CONSTRAINT magazyn_pracownik_fk FOREIGN KEY ( pracownik_idpracownika )
        REFERENCES pracownik ( idpracownika );

ALTER TABLE podpunkty_dostawy
    ADD CONSTRAINT r_20_dostawa_fk FOREIGN KEY ( dostawa_nrfaktury )
        REFERENCES dostawa ( nrfaktury );

ALTER TABLE podpunkty_dostawy
    ADD CONSTRAINT r_20_stan_magazynowy_fk FOREIGN KEY ( sm_towar_idtowaru,
                                                         smy_magazyn_idmagazynu )
        REFERENCES stan_magazynowy ( towar_idtowaru,
                                     magazyn_idmagazynu );

ALTER TABLE podpunkty_zamówienia
    ADD CONSTRAINT r_21_stan_magazynowy_fk FOREIGN KEY ( sm_towar_idtowaru,
                                                         sm_magazyn_idmagazynu )
        REFERENCES stan_magazynowy ( towar_idtowaru,
                                     magazyn_idmagazynu );

ALTER TABLE podpunkty_zamówienia
    ADD CONSTRAINT r_21_zamówienie_fk FOREIGN KEY ( z_nrzamówienia )
        REFERENCES zamówienie ( nrzamówienia );

ALTER TABLE stan_magazynowy
    ADD CONSTRAINT sm_magazyn_fk FOREIGN KEY ( magazyn_idmagazynu )
        REFERENCES magazyn ( idmagazynu );

ALTER TABLE stan_magazynowy
    ADD CONSTRAINT sm_towar_fk FOREIGN KEY ( towar_idtowaru )
        REFERENCES towar ( idtowaru );

ALTER TABLE towar
    ADD CONSTRAINT towar_kategoria_fk FOREIGN KEY ( kategoria_idkategorii )
        REFERENCES kategoria ( idkategorii );

ALTER TABLE towar
    ADD CONSTRAINT towar_producent_fk FOREIGN KEY ( producent_idproducenta )
        REFERENCES producent ( idproducenta );

ALTER TABLE zamówienie
    ADD CONSTRAINT zamówienie_kurier_fk FOREIGN KEY ( kurier_idkuriera )
        REFERENCES kurier ( idkuriera );

ALTER TABLE zamówienie
    ADD CONSTRAINT zamówienie_odbiorca_fk FOREIGN KEY ( odbiorca_idodbiorcy )
        REFERENCES odbiorca ( idodbiorcy );

CREATE SEQUENCE dostawa_nrfaktury_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER dostawa_nrfaktury_trg BEFORE
    INSERT ON dostawa
    FOR EACH ROW
    WHEN ( new.nrfaktury IS NULL )
BEGIN
    :new.nrfaktury := dostawa_nrfaktury_seq.nextval;
END;
/

CREATE SEQUENCE dostawca_iddostawcy_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER dostawca_iddostawcy_trg BEFORE
    INSERT ON dostawca
    FOR EACH ROW
    WHEN ( new.iddostawcy IS NULL )
BEGIN
    :new.iddostawcy := dostawca_iddostawcy_seq.nextval;
END;
/

CREATE SEQUENCE kategoria_idkategorii_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kategoria_idkategorii_trg BEFORE
    INSERT ON kategoria
    FOR EACH ROW
    WHEN ( new.idkategorii IS NULL )
BEGIN
    :new.idkategorii := kategoria_idkategorii_seq.nextval;
END;
/

CREATE SEQUENCE kurier_idkuriera_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kurier_idkuriera_trg BEFORE
    INSERT ON kurier
    FOR EACH ROW
    WHEN ( new.idkuriera IS NULL )
BEGIN
    :new.idkuriera := kurier_idkuriera_seq.nextval;
END;
/

CREATE SEQUENCE magazyn_idmagazynu_seq START WITH 1 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER magazyn_idmagazynu_trg BEFORE
    INSERT ON magazyn
    FOR EACH ROW
BEGIN
    :new.idmagazynu := magazyn_idmagazynu_seq.nextval;
END;
/

CREATE SEQUENCE odbiorca_idodbiorcy_seq START WITH 1 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER odbiorca_idodbiorcy_trg BEFORE
    INSERT ON odbiorca
    FOR EACH ROW
BEGIN
    :new.idodbiorcy := odbiorca_idodbiorcy_seq.nextval;
END;
/

CREATE SEQUENCE pracownik_idpracownika_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pracownik_idpracownika_trg BEFORE
    INSERT ON pracownik
    FOR EACH ROW
    WHEN ( new.idpracownika IS NULL )
BEGIN
    :new.idpracownika := pracownik_idpracownika_seq.nextval;
END;
/

CREATE SEQUENCE producent_idproducenta_seq START WITH 1 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER producent_idproducenta_trg BEFORE
    INSERT ON producent
    FOR EACH ROW
BEGIN
    :new.idproducenta := producent_idproducenta_seq.nextval;
END;
/

CREATE SEQUENCE seq_towar START WITH 1 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER towar_idtowaru_trg BEFORE
    INSERT ON towar
    FOR EACH ROW
BEGIN
    :new.idtowaru := seq_towar.nextval;
END;
/

CREATE SEQUENCE zamówienie_nrzamówienia_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zamówienie_nrzamówienia_trg BEFORE
    INSERT ON zamówienie
    FOR EACH ROW
    WHEN ( new.nrzamówienia IS NULL )
BEGIN
    :new.nrzamówienia := zamówienie_nrzamówienia_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            13
-- CREATE INDEX                             5
-- ALTER TABLE                             37
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          10
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         10
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
